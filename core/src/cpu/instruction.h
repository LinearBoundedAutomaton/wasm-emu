#ifndef INSTRUCTION_H
#define INSTRUCTION_H

#include<stdint.h>

#include "registers.h"


// Most if not all of the one byte opcode instruction mnemonics
typedef enum {
    ADD,
    PUSH,
    POP,
    OR,
    ADC,
    SBB,
    DAA,
    SUB,
    DAS,
    XOR,
    AAA,
    CMP,
    AAS,
    INC,
    DEC,
    PUSHA,
    POPA,
    BOUND,
    ARPL,
    IMUL,
    INS,
    OUTS,
    JO,
    JNO,
    JB,
    JNB,
    JZ,
    JNZ,
    JBE,
    JNBE,
    JS,
    JNS,
    JP,
    JNP,
    JL,
    JNL,
    JLE,
    JNLE,
    TEST,
    XCHG,
    MOV,
    NOP,
    PAUSE,
    CBW,
    CWDE,
    CWD,
    CDQ,
    CALLF,
    WAIT,
    PUSHF,
    POPF,
    SAHF,
    LAHF,
    MOVS,
    CMPS,
    STOS,
    LODS,
    SCAS,
    ROL,
    SHL,
    RETN,
    LES,
    LDS,
    ENTER,
    LEAVE,
    RETF,
    INT,
    INTO,
    IRET,
    AAM,
    AMX,
    AAD,
    ADX,
    SALC,
    XLAT,
    FADD,
    FMUL,
    FCOM,
    FCOMP,
    FSUB,
    FSUBR,
    FDIV,
    FDIVR,
    FLD,
    FXCH,
    FST,
    FNOP,
    FSTP,
    FLDENV,
    FCHS,
    FABS,
    FTST,
    FXAM,
    FLDCW,
    FLD1,
    FLDL2T,
    FLDL2E,
    FLDPI,
    FLDLG2,
    FLDLN2,
    FLDZ,
    FNSTENV,
    FSTENV,
    F2XM1,
    FYL2X,
    FPTAN,
    FPATAN,
    FXTRACT,
    FPREM1,
    FDECSTP,
    FINCSTP,
    FNSTCW,
    FSTCW,
    FPREM,
    FYL2XP1,
    FSQRT,
    FSINCOS,
    FRNDINT,
    FSCALE,
    FSIN,
    FCOS,
    FIADD,
    FCMOVB,
    FIMUL,
    FCMOVE,
    FICOM,
    FCMOVBE,
    FICOMP,
    FCMOVU,
    FISUB,
    FISUBR,
    FUCOMPP,
    FIDIV,
    FIDIVR,
    FILD,
    FCMOVNB,
    FISTTP,
    FCMOVNE,
    FIST,
    FCMOVNBE,
    FISTP,
    FCMOVNU,
    FNENI,
    FNDISI,
    FNCLEX,
    FCLEX,
    FNINIT,
    FINIT,
    FNSETPM,
    LOOPNZ,
    LOOPNE,
    LOOPZ,
    LOOPE,
    LOOP,
    JCXZ,
    JECXZ,
    IN,
    OUT,
    CALL,
    JMP,
    JMPF,
    LOCK,
    INT1,
    ICEBP,
    REPNZ,
    REPNE,
    REP,
    REPZ,
    REPE,
    HLT,
    CMC,
    NOT,
    NEG,
    CLC,
    STC,
    CLI,
    STI,
    CLD,
    STD,
} InstructionType;


typedef struct {
    //instruction opcode
    int16_t opcode;

    //What action are we actually doing with this instruction
    InstructionType type;

    //Pointers to the operands for this instruction
    int8_t * op1;
    int8_t * op2;
    int8_t * op3;
    int8_t * op4;

    //is the instruction 1 or 2/4 bytes wide
    int8_t width;

    //The size of the instruction
    int8_t size;
} Instruction;

void fetchAndDecodeInstruction(void * memory, RegisterHolder * registers, Instruction * instruction);


#endif